name: Build and Run Docker Image

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
        env:
          xpack.security.enabled: "false"
          discovery.type: "single-node"
          bootstrap.memory_lock: "true"
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        options: >-
          --health-cmd "curl -f http://localhost:9200 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 9200:9200

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Opcional: configurar a versão do JDK (Java 23)
      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'

      # Build com Maven para gerar o JAR
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Construa a imagem Docker utilizando o Dockerfile no projeto
      - name: Build Docker image
        run: docker build --no-cache -t my-spring-app .

      # Execute o container da aplicação
      - name: Run Docker container
        run: |
          docker run -d --name spring-app -p 8080:8080 -e SPRING_ELASTICSEARCH_URIS=http://localhost:9200 my-spring-app
          echo "Waiting for the Spring Boot app to be up..."
          sleep 30
          curl --fail http://localhost:8080 || (echo "Spring Boot app is not responding" && exit 1)

      - name: Tear down containers
        if: always()
        run: |
          docker stop spring-app
          docker rm spring-app